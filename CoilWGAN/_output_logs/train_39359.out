steer shape (50000,)
labels shape  (50000,)
Configurations of  all_da_aug
GANMODEL_NAME LSDcontrol_task_2d
LOSS_FUNCTION WGANmix
LR_G, LR_D, LR 0.0002 0.0002 0.0002
SKIP 0
TYPE task
L1 WEIGHT 1.0
TASK ADV WEIGHT 0.1
LAB SMOOTH 1
Loading IL
70 88
Transferring  p1.0.layers.0.0.weight  to  perception.0.layers.0.0.weight
Transferring  p1.0.layers.0.0.bias  to  perception.0.layers.0.0.bias
Transferring  p1.0.layers.0.1.weight  to  perception.0.layers.0.1.weight
Transferring  p1.0.layers.0.1.bias  to  perception.0.layers.0.1.bias
Transferring  p1.0.layers.0.1.running_mean  to  perception.0.layers.0.1.running_mean
Transferring  p1.0.layers.0.1.running_var  to  perception.0.layers.0.1.running_var
Transferring  p1.0.layers.1.0.weight  to  perception.0.layers.1.0.weight
Transferring  p1.0.layers.1.0.bias  to  perception.0.layers.1.0.bias
Transferring  p1.0.layers.1.1.weight  to  perception.0.layers.1.1.weight
Transferring  p1.0.layers.1.1.bias  to  perception.0.layers.1.1.bias
Transferring  p1.0.layers.1.1.running_mean  to  perception.0.layers.1.1.running_mean
Transferring  p1.0.layers.1.1.running_var  to  perception.0.layers.1.1.running_var
Transferring  p1.0.layers.2.0.weight  to  perception.0.layers.2.0.weight
Transferring  p1.0.layers.2.0.bias  to  perception.0.layers.2.0.bias
Transferring  p1.0.layers.2.1.weight  to  perception.0.layers.2.1.weight
Transferring  p1.0.layers.2.1.bias  to  perception.0.layers.2.1.bias
Transferring  p1.0.layers.2.1.running_mean  to  perception.0.layers.2.1.running_mean
Transferring  p1.0.layers.2.1.running_var  to  perception.0.layers.2.1.running_var
Transferring  p2.0.layers.0.0.weight  to  perception.0.layers.3.0.weight
Transferring  p2.0.layers.0.0.bias  to  perception.0.layers.3.0.bias
Transferring  p2.0.layers.0.1.weight  to  perception.0.layers.3.1.weight
Transferring  p2.0.layers.0.1.bias  to  perception.0.layers.3.1.bias
Transferring  p2.0.layers.0.1.running_mean  to  perception.0.layers.3.1.running_mean
Transferring  p2.0.layers.0.1.running_var  to  perception.0.layers.3.1.running_var
Transferring  p2.0.layers.1.0.weight  to  perception.0.layers.4.0.weight
Transferring  p2.0.layers.1.0.bias  to  perception.0.layers.4.0.bias
Transferring  p2.0.layers.1.1.weight  to  perception.0.layers.4.1.weight
Transferring  p2.0.layers.1.1.bias  to  perception.0.layers.4.1.bias
Transferring  p2.0.layers.1.1.running_mean  to  perception.0.layers.4.1.running_mean
Transferring  p2.0.layers.1.1.running_var  to  perception.0.layers.4.1.running_var
Transferring  p3.0.layers.0.0.weight  to  perception.0.layers.5.0.weight
Transferring  p3.0.layers.0.0.bias  to  perception.0.layers.5.0.bias
Transferring  p3.0.layers.0.1.weight  to  perception.0.layers.5.1.weight
Transferring  p3.0.layers.0.1.bias  to  perception.0.layers.5.1.bias
Transferring  p3.0.layers.0.1.running_mean  to  perception.0.layers.5.1.running_mean
Transferring  p3.0.layers.0.1.running_var  to  perception.0.layers.5.1.running_var
Transferring  p3.0.layers.1.0.weight  to  perception.0.layers.6.0.weight
Transferring  p3.0.layers.1.0.bias  to  perception.0.layers.6.0.bias
Transferring  p3.0.layers.1.1.weight  to  perception.0.layers.6.1.weight
Transferring  p3.0.layers.1.1.bias  to  perception.0.layers.6.1.bias
Transferring  p3.0.layers.1.1.running_mean  to  perception.0.layers.6.1.running_mean
Transferring  p3.0.layers.1.1.running_var  to  perception.0.layers.6.1.running_var
Transferring  perception_bottom.0.layers.0.0.weight  to  perception.0.layers.7.0.weight
Transferring  perception_bottom.0.layers.0.0.bias  to  perception.0.layers.7.0.bias
Transferring  perception_bottom.0.layers.0.1.weight  to  perception.0.layers.7.1.weight
Transferring  perception_bottom.0.layers.0.1.bias  to  perception.0.layers.7.1.bias
Transferring  perception_bottom.0.layers.0.1.running_mean  to  perception.0.layers.7.1.running_mean
Transferring  perception_bottom.0.layers.0.1.running_var  to  perception.0.layers.7.1.running_var
Transferring  perception_bottom.1.layers.0.0.weight  to  perception.1.layers.0.0.weight
Transferring  perception_bottom.1.layers.0.0.bias  to  perception.1.layers.0.0.bias
Transferring  perception_bottom.1.layers.1.0.weight  to  perception.1.layers.1.0.weight
Transferring  perception_bottom.1.layers.1.0.bias  to  perception.1.layers.1.0.bias
Transferring  measurements.layers.0.0.weight  to  measurements.layers.0.0.weight
Transferring  measurements.layers.0.0.bias  to  measurements.layers.0.0.bias
Transferring  measurements.layers.1.0.weight  to  measurements.layers.1.0.weight
Transferring  measurements.layers.1.0.bias  to  measurements.layers.1.0.bias
Transferring  join.after_process.layers.0.0.weight  to  join.after_process.layers.0.0.weight
Transferring  join.after_process.layers.0.0.bias  to  join.after_process.layers.0.0.bias
Transferring  speed_branch.layers.0.0.weight  to  speed_branch.layers.0.0.weight
Transferring  speed_branch.layers.0.0.bias  to  speed_branch.layers.0.0.bias
Transferring  speed_branch.layers.1.0.weight  to  speed_branch.layers.1.0.weight
Transferring  speed_branch.layers.1.0.bias  to  speed_branch.layers.1.0.bias
Transferring  speed_branch.layers.2.0.weight  to  speed_branch.layers.2.0.weight
Transferring  speed_branch.layers.2.0.bias  to  speed_branch.layers.2.0.bias
Transferring  branch.layers.0.0.weight  to  branches.branched_modules.0.layers.0.0.weight
Transferring  branch.layers.0.0.bias  to  branches.branched_modules.0.layers.0.0.bias
Transferring  branch.layers.1.0.weight  to  branches.branched_modules.0.layers.1.0.weight
Transferring  branch.layers.1.0.bias  to  branches.branched_modules.0.layers.1.0.bias
Transferring  branch.layers.2.0.weight  to  branches.branched_modules.0.layers.2.0.weight
Transferring  branch.layers.2.0.bias  to  branches.branched_modules.0.layers.2.0.bias
IL Model Loaded!
Loading Aug Decoder
24 24
Transferring  stage1_upsample.0.weight  to  stage1_upsample.0.weight
Transferring  stage1_upsample.0.bias  to  stage1_upsample.0.bias
Transferring  stage1_upsample.3.conv_layer.weight  to  stage1_upsample.3.conv_layer.weight
Transferring  stage1_upsample.3.conv_layer.bias  to  stage1_upsample.3.conv_layer.bias
Transferring  stage1_upsample.4.conv_layer.weight  to  stage1_upsample.4.conv_layer.weight
Transferring  stage1_upsample.4.conv_layer.bias  to  stage1_upsample.4.conv_layer.bias
Transferring  stage1_upsample.5.conv_layer.weight  to  stage1_upsample.5.conv_layer.weight
Transferring  stage1_upsample.5.conv_layer.bias  to  stage1_upsample.5.conv_layer.bias
Transferring  stage2_upsample.0.weight  to  stage2_upsample.0.weight
Transferring  stage2_upsample.0.bias  to  stage2_upsample.0.bias
Transferring  stage2_upsample.3.conv_layer.weight  to  stage2_upsample.3.conv_layer.weight
Transferring  stage2_upsample.3.conv_layer.bias  to  stage2_upsample.3.conv_layer.bias
Transferring  stage2_upsample.4.conv_layer.weight  to  stage2_upsample.4.conv_layer.weight
Transferring  stage2_upsample.4.conv_layer.bias  to  stage2_upsample.4.conv_layer.bias
Transferring  stage2_upsample.5.conv_layer.weight  to  stage2_upsample.5.conv_layer.weight
Transferring  stage2_upsample.5.conv_layer.bias  to  stage2_upsample.5.conv_layer.bias
Transferring  stage3_upsample.0.weight  to  stage3_upsample.0.weight
Transferring  stage3_upsample.0.bias  to  stage3_upsample.0.bias
Transferring  stage3_upsample.3.conv_layer.weight  to  stage3_upsample.3.conv_layer.weight
Transferring  stage3_upsample.3.conv_layer.bias  to  stage3_upsample.3.conv_layer.bias
Transferring  stage3_upsample.4.conv_layer.weight  to  stage3_upsample.4.conv_layer.weight
Transferring  stage3_upsample.4.conv_layer.bias  to  stage3_upsample.4.conv_layer.bias
Transferring  stage4_upsample.0.weight  to  stage4_upsample.0.weight
Transferring  stage4_upsample.0.bias  to  stage4_upsample.0.bias
Decoder Model Loaded!
initialize network with normal
initialize network with normal
_netD_bin(
  (main_model): Sequential(
    (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 0))
    (1): LeakyReLU(negative_slope=0.2, inplace)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 0))
    (3): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (4): LeakyReLU(negative_slope=0.2, inplace)
    (5): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 0))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (7): LeakyReLU(negative_slope=0.2, inplace)
    (8): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 0))
    (9): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (10): LeakyReLU(negative_slope=0.2, inplace)
  )
  (bin_model): Sequential(
    (0): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 0))
    (1): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (2): LeakyReLU(negative_slope=0.2, inplace)
    (3): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), padding=(1, 0))
  )
)
_netD_aux(
  (main_model): Sequential(
    (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 0))
    (1): LeakyReLU(negative_slope=0.2, inplace)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 0))
    (3): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (4): LeakyReLU(negative_slope=0.2, inplace)
    (5): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 0))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (7): LeakyReLU(negative_slope=0.2, inplace)
    (8): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 0))
    (9): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (10): LeakyReLU(negative_slope=0.2, inplace)
  )
  (aux_model): Sequential(
    (0): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (1): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (2): LeakyReLU(negative_slope=0.2, inplace)
    (3): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
  )
)
_netF(
  (p1): Sequential(
    (0): Conv(
      (layers): Sequential(
        (0): Sequential(
          (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(2, 2))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Dropout2d(p=0.2)
          (3): ReLU(inplace)
        )
        (1): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Dropout2d(p=0.4)
          (3): ReLU(inplace)
        )
        (2): Sequential(
          (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Dropout2d(p=0.4)
          (3): ReLU(inplace)
        )
      )
    )
  )
  (p2): Sequential(
    (0): Conv(
      (layers): Sequential(
        (0): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Dropout2d(p=0.4)
          (3): ReLU(inplace)
        )
        (1): Sequential(
          (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Dropout2d(p=0.4)
          (3): ReLU(inplace)
        )
      )
    )
  )
  (p3): Sequential(
    (0): Conv(
      (layers): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Dropout2d(p=0.4)
          (3): ReLU(inplace)
        )
        (1): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Dropout2d(p=0.4)
          (3): ReLU(inplace)
        )
      )
    )
  )
  (perception_bottom): Sequential(
    (0): Conv(
      (layers): Sequential(
        (0): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Dropout2d(p=0.4)
          (3): ReLU(inplace)
        )
      )
    )
    (1): FC(
      (layers): Sequential(
        (0): Sequential(
          (0): Linear(in_features=8192, out_features=512, bias=True)
          (1): Dropout2d(p=0.5)
          (2): ReLU(inplace)
        )
        (1): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=True)
          (1): Dropout2d(p=0.5)
          (2): ReLU(inplace)
        )
      )
    )
  )
  (measurements): FC(
    (layers): Sequential(
      (0): Sequential(
        (0): Linear(in_features=1, out_features=128, bias=True)
        (1): Dropout2d(p=0.5)
        (2): ReLU(inplace)
      )
      (1): Sequential(
        (0): Linear(in_features=128, out_features=128, bias=True)
        (1): Dropout2d(p=0.5)
        (2): ReLU(inplace)
      )
    )
  )
  (join): Join(
    (after_process): FC(
      (layers): Sequential(
        (0): Sequential(
          (0): Linear(in_features=640, out_features=512, bias=True)
          (1): Dropout2d(p=0.5)
          (2): ReLU(inplace)
        )
      )
    )
  )
  (speed_branch): FC(
    (layers): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=True)
        (1): Dropout2d(p=0.5)
        (2): ReLU(inplace)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): Dropout2d(p=0.5)
        (2): ReLU(inplace)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=1, bias=True)
        (1): Dropout2d(p=0.0)
        (2): ReLU(inplace)
      )
    )
  )
  (branch): FC(
    (layers): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=True)
        (1): Dropout2d(p=0.5)
        (2): ReLU(inplace)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): Dropout2d(p=0.5)
        (2): ReLU(inplace)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=3, bias=True)
        (1): Dropout2d(p=0.0)
      )
    )
  )
)
_netG(
  (stage1_upsample): Sequential(
    (0): ConvTranspose2d(256, 256, kernel_size=(7, 7), stride=(1, 1))
    (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (2): ReLU(inplace)
    (3): ResnetBlock(
      (conv_layer): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (dropout): Dropout(p=0.5)
      (activation): ReLU(inplace)
      (normalization_layer): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (4): ResnetBlock(
      (conv_layer): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (dropout): Dropout(p=0.5)
      (activation): ReLU(inplace)
      (normalization_layer): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (5): ResnetBlock(
      (conv_layer): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (dropout): Dropout(p=0.5)
      (activation): ReLU(inplace)
      (normalization_layer): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
  )
  (stage2_upsample): Sequential(
    (0): ConvTranspose2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (2): ReLU(inplace)
    (3): ResnetBlock(
      (conv_layer): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (dropout): Dropout(p=0.5)
      (activation): ReLU(inplace)
      (normalization_layer): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (4): ResnetBlock(
      (conv_layer): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (dropout): Dropout(p=0.5)
      (activation): ReLU(inplace)
      (normalization_layer): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (5): ResnetBlock(
      (conv_layer): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (dropout): Dropout(p=0.5)
      (activation): ReLU(inplace)
      (normalization_layer): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
  )
  (stage3_upsample): Sequential(
    (0): ConvTranspose2d(256, 128, kernel_size=(5, 5), stride=(2, 2))
    (1): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (2): ReLU(inplace)
    (3): ResnetBlock(
      (conv_layer): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (dropout): Dropout(p=0.5)
      (activation): ReLU(inplace)
      (normalization_layer): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (4): ResnetBlock(
      (conv_layer): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (dropout): Dropout(p=0.5)
      (activation): ReLU(inplace)
      (normalization_layer): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
  )
  (stage4_upsample): Sequential(
    (0): ConvTranspose2d(128, 3, kernel_size=(8, 8), stride=(2, 2))
    (1): Sigmoid()
  )
)
Using cross entropy!
----------------
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 0.0896, -1.1546,  0.8448,  0.5143],
        [-0.4590, -1.2157,  0.7786, -0.3865],
        [ 0.0360, -1.1523, -0.6261,  0.1564],
        [-0.6874, -0.8191,  0.7461, -0.5122],
        [-1.1051,  0.0248,  1.1008, -0.3672],
        [ 0.2873,  0.7060,  0.4153, -0.2623],
        [-0.3501, -0.6137, -1.1008,  1.7884],
        [ 0.2397,  0.1113, -0.4064, -1.3327],
        [-0.8014, -1.8299,  1.1139, -0.3797],
        [-0.1463, -0.7422, -0.2579,  1.3927],
        [-0.9771, -1.5129, -1.7090,  0.5350],
        [-0.2269, -0.4800, -0.9122, -0.5473],
        [ 0.8312,  0.1201, -0.9139, -0.2356],
        [ 0.5179, -1.7440,  0.1969,  0.6286],
        [-0.4318,  0.6669, -0.1710,  0.6304],
        [-0.5744,  0.1965, -0.6664, -0.3350],
        [-1.0734,  0.3007,  0.5788,  0.1398],
        [-0.1337, -0.6436,  0.4218,  1.4334],
        [ 0.3071,  0.1660, -1.4164, -0.7107],
        [ 0.1215,  0.0054, -1.5067, -0.2193]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 0.0896, -1.1546,  0.8448,  0.5143], device='cuda:0') tensor([ 0.1164,  0.9183,  1.6292, -1.1237], device='cuda:0') tensor([-0.6183, -1.1112, -0.0713, -0.1023], device='cuda:0') tensor([-0.3118, -0.1387,  0.3284,  0.2340], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 0.7047,  0.6702, -0.3000, -0.3569],
        [ 0.2691, -0.7997, -0.2742, -0.6069],
        [-0.4949, -0.7975, -0.3969,  0.5856],
        [ 0.4825, -0.0091, -0.3808, -1.0366],
        [ 0.1237,  1.1247, -0.7175,  0.1288],
        [ 2.1890,  0.1604, -0.3180, -0.3255],
        [ 0.6174,  0.7824, -0.3131, -1.1507],
        [ 0.3251,  0.8686, -0.6581, -0.0399],
        [ 1.1564, -0.1701, -0.6453, -0.8156],
        [ 0.3119, -1.2937, -0.4073,  1.4837],
        [ 0.7540, -1.4498, -1.5067, -1.2345],
        [ 1.5579, -0.4507, -0.8395, -1.1828],
        [ 0.4077,  0.9333, -1.2250, -1.1769],
        [ 1.2181,  3.5986, -1.5479, -0.5537],
        [ 1.3042,  1.6739, -0.1129, -0.7412],
        [-0.0335,  0.2550,  1.3963, -0.0012],
        [-0.5535, -0.5217, -0.8236, -0.7448],
        [ 0.7427,  0.5835,  1.2821, -1.4414],
        [ 0.3311, -0.4684, -0.6197,  0.3040],
        [ 0.7916,  0.3468, -0.2784, -0.2348]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 0.7047,  0.6702, -0.3000, -0.3569], device='cuda:0') tensor([ 1.2273,  0.6251, -1.0638, -0.6848], device='cuda:0') tensor([ 1.4335,  0.5453,  0.9314, -1.5949], device='cuda:0') tensor([ 1.0789, -0.0782,  1.2525, -0.2580], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[-0.1857,  0.0717,  0.5153, -1.3055],
        [ 0.1277, -1.0727,  0.9917, -1.4964],
        [-0.9796, -1.7626,  0.2615,  0.1062],
        [-0.0103, -2.0406, -0.4661, -0.5541],
        [-0.1461, -0.9813, -0.5876,  0.3664],
        [ 0.1232,  0.2342, -0.9790,  0.9180],
        [ 0.9861, -1.3177, -0.2851, -0.2584],
        [-0.2801,  0.0654, -0.7051, -1.6328],
        [ 0.7533,  1.0092,  1.1963, -0.0777],
        [ 0.8083,  1.8361,  0.4465, -0.1778],
        [ 0.3263,  0.9817, -1.0528, -1.2928],
        [ 1.9705, -0.2273,  0.4335, -2.2604],
        [-0.6406,  0.6981,  1.3215, -1.1208],
        [ 2.9591, -0.1337, -1.3196, -1.7654],
        [ 0.4124,  0.7376,  0.5590, -1.5236],
        [-0.2066, -0.6508, -0.0030, -0.6635],
        [ 1.0697,  0.8104, -0.7825, -1.2849],
        [ 1.3764, -1.9763, -0.9804, -1.6529],
        [ 0.9861, -1.3177, -0.2851, -0.2584],
        [ 0.0448, -0.4503,  0.8117, -1.8658]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([-0.1857,  0.0717,  0.5153, -1.3055], device='cuda:0') tensor([ 0.8693,  0.9948,  0.0267, -0.9321], device='cuda:0') tensor([-1.4974,  0.0706,  1.9561,  0.0920], device='cuda:0') tensor([-0.3553, -0.7697,  2.0147,  0.7490], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 4.2558,  1.0749, -1.0812, -2.1327],
        [ 1.7481, -0.9800, -2.7496, -1.9100],
        [ 1.1725,  2.2126,  0.7581, -2.1488],
        [ 5.3582,  0.2147, -2.1491, -1.7807],
        [ 1.1459,  1.4182,  2.5418,  0.0108],
        [ 2.0683,  1.9771, -2.4511, -1.9895],
        [ 1.6085,  0.6008, -3.2356, -2.3726],
        [ 1.0180,  1.0773,  0.3832, -1.2374],
        [ 2.9677, -0.4762,  0.0193, -0.5127],
        [ 2.3945, -0.7575, -1.4071, -1.8246],
        [ 0.0049,  2.2594,  1.5768, -1.0569],
        [ 1.2874,  2.5189, -0.2721, -1.2425],
        [ 0.4518,  1.3321, -0.6075,  0.0589],
        [ 0.1302,  1.6087,  1.0469,  0.5813],
        [ 1.8006,  0.0225, -1.5962, -2.9267],
        [ 2.7273, -0.6038, -1.0643, -0.6751],
        [ 3.3989,  1.9046, -0.4657, -3.9451],
        [-1.4341,  0.7521, -0.8791,  1.2335],
        [ 1.3570,  0.6920,  0.6124, -0.3409],
        [ 1.6811,  0.9463,  1.4213, -1.9309]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 4.2558,  1.0749, -1.0812, -2.1327], device='cuda:0') tensor([ 0.0395,  3.0439,  1.6217,  1.2148], device='cuda:0') tensor([-1.4993, -0.3205,  3.8632, -2.0704], device='cuda:0') tensor([-1.2346, -2.3152,  0.8954,  2.1824], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 1.1868,  0.1166, -0.0207, -1.8470],
        [ 2.6419,  0.9134, -0.7598, -1.5101],
        [ 1.8223,  3.0312, -0.1717, -1.3874],
        [ 0.1345,  1.6352,  0.7126, -1.6385],
        [ 0.6474, -2.1962, -1.0930, -1.3685],
        [ 1.9021,  3.9352, -0.7118, -2.0972],
        [ 1.7017,  1.6092, -0.7052, -3.4495],
        [ 4.2776, -0.1172, -2.5835, -2.9623],
        [ 5.9690,  1.1002, -1.9043, -4.0167],
        [ 3.8408, -0.6904, -2.4632, -2.0995],
        [ 2.8629, -0.1458, -1.1261, -0.7182],
        [ 4.7450,  0.7942, -1.0846, -1.5171],
        [ 0.4018,  0.3186, -1.4153, -0.2188],
        [ 2.4142,  0.4432, -0.5058, -0.0689],
        [ 3.1457,  2.2067, -0.6893, -1.3981],
        [ 2.2778,  0.5864, -0.5627, -2.4371],
        [ 2.9210, -1.2436, -2.8073, -1.4797],
        [ 0.5615,  0.1547,  0.9716, -0.4518],
        [ 0.4273, -0.0576,  0.2095, -1.4272],
        [ 3.3201,  2.2657,  0.5512, -0.8497]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 1.1868,  0.1166, -0.0207, -1.8470], device='cuda:0') tensor([ 1.6773,  1.2683, -1.0635, -1.1001], device='cuda:0') tensor([ 0.9612, -1.3856,  1.5783,  0.4360], device='cuda:0') tensor([-2.8807, -3.3228, -1.1544,  1.5865], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 3.5129, -1.0701, -0.0094, -1.5371],
        [ 0.7340,  1.2166,  0.5028, -0.4877],
        [ 2.7247,  2.4780, -0.7743, -2.1239],
        [ 1.8492,  4.3088,  1.3558, -0.2461],
        [ 1.4666,  0.5567,  1.5009, -1.6282],
        [ 0.1308,  0.5034,  0.0409, -0.4713],
        [ 2.0749, -0.2288, -2.6406, -0.6287],
        [ 4.2432,  0.1745, -1.9000, -1.8419],
        [ 2.6436,  1.4518, -0.5888, -1.5611],
        [ 0.7286,  3.0764,  2.2688, -0.9742],
        [ 1.8935,  2.1683, -2.9768, -2.9254],
        [ 3.2422, -0.4939, -2.2621, -1.7032],
        [-1.5540, -1.0808,  0.5697, -0.2212],
        [ 2.1397,  2.8503,  1.2594, -2.3434],
        [-0.0315,  0.3975,  0.0884, -0.9865],
        [ 1.1960,  1.0008, -0.8404, -3.2023],
        [ 1.6873,  0.7056,  0.3337, -2.0727],
        [ 0.5137,  2.6178,  0.1923, -1.2374],
        [ 4.7001,  1.0682, -2.6798, -2.6922],
        [ 0.6062,  1.1902,  1.3007,  0.7971]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 3.5129, -1.0701, -0.0094, -1.5371], device='cuda:0') tensor([-0.6288,  2.8554,  1.3368, -1.8382], device='cuda:0') tensor([-1.4826, -0.6153,  5.2956, -1.6611], device='cuda:0') tensor([-1.9244, -2.3901, -0.6996,  3.4266], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 3.1194,  0.2165, -1.9380, -1.3363],
        [ 1.6184,  2.0275,  0.4496, -0.5756],
        [ 0.4744,  1.3970,  0.2266, -1.4071],
        [ 0.7429,  0.5172, -0.0560,  0.5608],
        [ 2.1109,  0.9496, -0.8275, -0.7652],
        [ 2.7362, -0.2116, -2.1136, -2.3948],
        [ 3.7145, -0.0512,  0.7681, -0.4644],
        [ 1.3278,  0.7229,  0.8362, -2.1293],
        [ 2.7275,  1.4073, -0.9023, -1.3112],
        [ 0.8605,  1.7228,  0.6887,  0.3100],
        [-0.7875,  2.0000, -0.5036, -0.7429],
        [ 1.2275,  0.4573, -0.9708, -0.6366],
        [ 3.6679, -0.3483, -1.5107, -1.9289],
        [ 0.8678,  3.1076,  1.3747, -0.8953],
        [ 2.1184,  1.7540, -0.4411, -1.2575],
        [ 1.3364,  2.6261, -1.7847, -1.1500],
        [ 4.7874,  0.0773, -1.8543, -2.1175],
        [ 0.9642,  0.9722,  0.1742, -0.7210],
        [ 0.8962,  2.1994,  1.1838, -1.1874],
        [ 0.3285,  0.3919, -0.5653, -0.2716]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 3.1194,  0.2165, -1.9380, -1.3363], device='cuda:0') tensor([ 2.3180,  0.8973, -0.8203, -1.8277], device='cuda:0') tensor([-2.4792, -0.0344,  4.3814, -0.2450], device='cuda:0') tensor([-1.6644,  0.0289,  0.5163,  0.3803], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 1.5699,  0.3581, -0.4397,  0.6308],
        [ 0.5004,  0.2777,  0.8814, -0.3700],
        [-0.5020,  1.0334,  0.0327, -0.6783],
        [-1.0051,  0.0662,  0.5603, -0.4339],
        [-0.6672, -0.8653,  0.0817,  0.3605],
        [-1.4141, -2.8770,  1.3793, -0.9120],
        [ 1.7483, -0.4860, -2.5116, -1.4816],
        [-0.2030,  2.7990,  1.2101, -0.4854],
        [-0.5230, -0.0726, -0.1265,  0.3193],
        [ 4.0185,  0.5996, -0.9287, -0.9377],
        [ 0.9568,  0.5808, -1.4138, -1.1450],
        [ 1.4717,  2.1695,  1.2904,  1.1756],
        [ 0.0303,  0.9356,  2.0865, -0.7396],
        [ 1.4182,  0.2789, -0.4134, -0.2192],
        [-0.8210, -1.5174,  1.3069,  0.6097],
        [-1.2890, -1.1074,  2.7850,  0.2267],
        [ 4.0852, -0.1114,  0.4464, -0.4386],
        [-0.1514, -0.0433, -0.3297, -1.7591],
        [-0.1274,  1.9062, -1.1210,  0.0113],
        [-0.5352, -1.2771,  1.0201,  0.2069]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 1.5699,  0.3581, -0.4397,  0.6308], device='cuda:0') tensor([-2.5261,  0.0655,  4.3451,  1.0392], device='cuda:0') tensor([-0.1005,  0.3185, -1.0481,  0.5994], device='cuda:0') tensor([-2.4728, -1.3312, -0.8835,  1.9640], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 1.9751,  2.1698, -1.9683, -3.0179],
        [ 1.7784,  1.7975, -2.4887, -1.0477],
        [ 1.5863,  1.9839,  0.3143, -1.1511],
        [ 0.2657,  0.8952, -0.0531, -1.2124],
        [-1.1925, -0.8301,  0.7148, -0.3869],
        [ 2.1518,  0.9121,  1.0417, -0.2434],
        [ 0.6551, -1.2199, -0.6313,  0.3464],
        [ 1.7768,  2.5312, -3.0948, -1.2699],
        [ 1.3910,  1.8207, -2.2210, -0.6597],
        [ 0.7537,  0.2748, -0.8626, -1.0551],
        [ 3.4964, -1.1222, -3.0158, -1.9371],
        [ 1.8424,  2.2098, -0.0470, -2.3069],
        [ 0.5417, -0.3856, -0.5924, -1.1770],
        [ 1.9082,  1.2809, -0.3211, -1.2280],
        [ 2.0849,  0.1072, -3.0802, -1.0345],
        [ 0.2310,  2.4003, -0.9791, -0.6030],
        [ 1.5217,  0.7053, -0.8993, -0.3854],
        [-1.4529, -0.0047, -0.2949, -1.2210],
        [ 2.2313,  1.3182, -1.1155, -2.2205],
        [ 1.6567, -0.4777, -0.2898, -2.9546]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 1.9751,  2.1698, -1.9683, -3.0179], device='cuda:0') tensor([ 1.1694,  1.8471,  1.3381, -0.5562], device='cuda:0') tensor([-1.0104,  1.8789,  3.1034, -0.0018], device='cuda:0') tensor([-1.3662, -1.4847, -2.4188,  0.7531], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 1.6826,  1.1068, -1.8187, -0.8698],
        [-1.9647,  0.5669,  0.7567, -1.0117],
        [ 2.0378,  0.6400, -1.2381,  0.3831],
        [ 2.8390,  4.0162, -0.7130, -1.6641],
        [ 0.4153,  2.2414,  0.4630, -0.8619],
        [ 3.9228, -1.8437, -0.0924, -3.1469],
        [-0.0938,  1.5464, -0.7533,  0.8343],
        [-1.6118,  2.7881, -0.1389, -0.7124],
        [-0.5963,  0.0623,  0.6197, -2.4986],
        [-0.9330, -0.6074,  0.3826,  0.1458],
        [ 0.9134, -1.0867, -2.1637,  0.4389],
        [ 2.5218,  1.7270, -0.3969, -1.0539],
        [ 2.8416,  2.1415,  1.5469, -2.8625],
        [ 1.2710,  1.7689,  0.6760, -0.1882],
        [ 3.0885,  0.1782, -2.5648, -1.0453],
        [ 2.4045, -0.0930,  1.2076,  0.4747],
        [-0.9627,  0.0432,  0.8685, -1.8761],
        [ 0.1943,  3.1066,  0.5472, -1.4696],
        [ 2.5091,  1.6970,  1.2057, -0.1646],
        [ 1.5284,  0.8290, -0.8106, -2.7024]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 1.6826,  1.1068, -1.8187, -0.8698], device='cuda:0') tensor([-0.4914,  0.5128,  0.8627, -1.9020], device='cuda:0') tensor([ 0.2786,  1.2497,  3.2712,  1.4922], device='cuda:0') tensor([-2.4391, -2.5669, -2.4519,  3.5141], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[-1.4502,  1.2502, -0.9699,  0.3782],
        [ 3.3838,  2.0055, -1.2878, -0.7969],
        [ 4.0427, -0.8736, -1.4005, -1.5900],
        [-0.3337, -1.1515, -1.8630, -0.3889],
        [-0.9331,  1.5236, -0.3862, -1.4637],
        [ 0.3942,  2.0720,  1.2993, -1.5428],
        [-0.7076,  0.6446,  0.0162,  0.2826],
        [ 1.6267, -0.6551, -0.7555, -1.8006],
        [ 0.6234,  1.9082, -0.3024, -1.3938],
        [-1.5911, -3.3428, -0.4158, -0.1007],
        [ 0.9414,  0.7081, -0.6318, -2.5152],
        [ 0.5731, -1.6167, -1.4942, -0.1601],
        [ 0.4672, -0.0444, -0.5924, -0.9143],
        [-0.4869, -0.3060, -1.0095, -1.9223],
        [ 3.2094, -3.2225,  0.1601, -2.8908],
        [ 1.8045,  1.7276,  1.9763, -2.0100],
        [ 0.9907,  2.3374,  0.8851, -1.8180],
        [-1.2464,  1.9262, -0.6140, -0.3453],
        [ 1.5456,  0.2922, -0.4037, -3.6293],
        [ 2.2816,  1.5319, -1.1624, -0.2670]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([-1.4502,  1.2502, -0.9699,  0.3782], device='cuda:0') tensor([-1.5496,  1.1246, -0.8128, -1.7223], device='cuda:0') tensor([-1.2382, -2.3995,  3.8711, -0.2000], device='cuda:0') tensor([-2.2361,  0.5421, -1.0369,  1.2439], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 0.1544,  0.8826,  2.1989, -0.2748],
        [ 0.1726, -1.7592, -1.5373, -1.7030],
        [ 0.9643,  1.1620,  0.1144, -1.7898],
        [ 1.6997, -0.5820, -0.5940, -1.4742],
        [-1.6232, -0.0376,  0.0062, -0.4662],
        [ 2.5471,  0.1505,  0.0448, -1.0023],
        [ 2.1806,  0.1751,  0.4707,  1.2483],
        [ 4.3449,  0.4123, -1.0761,  1.1409],
        [ 1.1489, -0.0822, -1.1582, -2.4838],
        [ 1.7340, -2.0584, -0.1559, -1.2293],
        [-0.0108,  1.4436, -1.9171, -1.3860],
        [ 1.4052, -1.6701,  0.3568,  0.4644],
        [-1.4395,  1.2510,  0.3137,  1.1257],
        [-0.0614,  0.2862, -0.1937, -1.8332],
        [-0.3672,  2.0685,  0.5096, -0.9555],
        [ 1.2704,  2.5617,  0.3198, -0.2375],
        [ 0.5620, -0.2522,  0.6202,  0.0970],
        [ 0.8194, -1.1936, -0.1578, -1.5850],
        [-0.9532,  0.7516, -1.1689, -1.4066],
        [ 0.3685,  0.9442,  0.6679,  0.5300]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 0.1544,  0.8826,  2.1989, -0.2748], device='cuda:0') tensor([ 2.2734,  0.9110,  0.7467, -0.8308], device='cuda:0') tensor([-1.8949, -0.6701,  2.0179, -0.7509], device='cuda:0') tensor([-1.7480, -1.5364, -0.9146,  2.1611], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 0.7692, -2.0382, -0.2779, -1.5369],
        [-0.0812, -0.7756, -1.7308, -1.0054],
        [ 1.5890,  1.7278, -0.7137, -0.7565],
        [ 0.8739, -0.3905, -2.2107, -0.3144],
        [ 0.9963,  2.2795, -0.6825, -1.9493],
        [ 3.9574, -1.0180, -2.3720, -2.7056],
        [-0.1071,  0.0023, -2.0994,  0.4507],
        [ 2.7977,  0.4850, -0.6598, -0.7781],
        [ 1.3881, -1.5870, -0.3457, -1.1760],
        [-1.0709, -3.8265, -1.0927,  0.4191],
        [-0.4110, -1.3858, -0.6098, -0.2992],
        [ 2.6767,  0.2270, -1.6118, -1.6385],
        [ 1.7098, -1.0636, -1.0395, -1.8803],
        [ 0.4299, -1.2010, -0.0296,  0.9274],
        [ 0.0070,  0.2928, -0.6265, -0.7857],
        [ 1.9433,  1.9747, -1.2616, -0.6445],
        [ 1.0809, -1.5541,  1.3959, -2.6046],
        [ 2.6395,  0.7687,  0.0459, -1.7891],
        [ 1.8712,  0.1836, -1.6152, -0.8853],
        [ 1.9898,  0.4043,  2.3903, -0.3674]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 0.7692, -2.0382, -0.2779, -1.5369], device='cuda:0') tensor([ 0.6060,  0.1254,  0.0215, -1.3653], device='cuda:0') tensor([ 2.9333,  1.7872,  0.1277, -0.8316], device='cuda:0') tensor([ 1.3406,  0.6574, -2.0395, -0.7207], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 0.4987, -0.4724, -2.2779,  0.3064],
        [-0.7190,  1.2661, -0.3685,  0.7988],
        [ 3.2520, -2.7936, -1.3446, -2.0710],
        [ 1.5223,  2.8974,  0.7937, -0.7072],
        [ 1.4031, -0.2929,  1.1208, -0.3282],
        [-0.6385,  1.3416,  0.9746, -0.2507],
        [-0.4884,  0.1187,  0.4362, -1.3846],
        [-0.0836,  0.1534, -0.9962, -3.1456],
        [-0.5863,  4.4245,  0.6451, -0.0268],
        [-1.3691,  3.7965, -1.3235, -0.1636],
        [ 2.5037,  2.2606,  0.2857, -2.2675],
        [ 1.4106,  2.6353,  3.8820, -1.3790],
        [ 2.0365,  5.3192,  0.3131, -0.5888],
        [ 0.4692,  0.1701, -1.7928,  0.8128],
        [ 1.8433, -0.4917,  1.0143, -1.0743],
        [ 2.4950,  3.4719,  1.7961, -1.2675],
        [ 0.0415,  2.0189,  1.5142, -1.4342],
        [ 0.4346,  3.0822, -0.3020, -1.6225],
        [ 0.2114,  0.9984, -0.6076, -1.5953],
        [-1.9915,  1.2626, -1.1595, -3.2069]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 0.4987, -0.4724, -2.2779,  0.3064], device='cuda:0') tensor([ 1.3572, -0.2593, -0.7448, -1.7067], device='cuda:0') tensor([-0.4566,  0.7954,  2.9569,  0.2914], device='cuda:0') tensor([-1.8886,  3.3737,  1.3026,  0.2968], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 2.5045,  1.2038,  0.9057,  0.8783],
        [-0.3681, -0.2598, -3.4115,  1.2229],
        [-0.0912,  1.5770,  4.5629, -0.1967],
        [ 0.8938, -0.1739,  0.5979, -0.5606],
        [ 0.6752, -0.7965,  0.8450,  0.0701],
        [ 2.4276, -0.7807, -0.6257, -1.2765],
        [ 1.1934,  1.4351,  0.6470, -0.7244],
        [ 0.4033,  0.3707,  4.1065, -0.1297],
        [ 0.8393, -0.0763,  0.4218,  0.7376],
        [-1.1990, -0.5441, -0.0582,  0.8351],
        [ 1.9983,  1.9209,  0.3434, -2.0221],
        [ 0.2498,  0.5319,  1.5013,  0.6748],
        [ 0.4155,  0.1128, -0.5958, -1.4612],
        [ 1.5909,  0.2187,  0.0237, -0.3942],
        [ 1.6204, -0.7434,  0.6862, -0.0127],
        [ 3.8963,  1.8352,  0.0587, -3.3455],
        [-1.0465, -2.1485,  1.2579,  1.0111],
        [ 0.5097,  0.5576, -0.3255, -0.2015],
        [-0.5173,  2.3891,  2.7990, -1.0041],
        [ 1.8057,  0.0944, -1.4592,  0.2844]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 2.5045,  1.2038,  0.9057,  0.8783], device='cuda:0') tensor([ 1.9692,  0.3609, -0.7929,  1.7586], device='cuda:0') tensor([ 1.0532,  0.0411,  4.5950,  0.6458], device='cuda:0') tensor([-1.1146, -0.6972,  1.1210,  1.8390], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[-1.4632, -1.8053,  0.4400,  1.0018],
        [ 1.0345,  3.5694,  0.6607, -2.1712],
        [ 4.3048,  1.8285, -0.9917, -1.0054],
        [ 6.2135,  1.7445, -0.8597, -0.9411],
        [ 6.4190, -0.4033, -1.6485, -2.9231],
        [-0.9782, -2.2964,  1.5184, -0.4565],
        [-0.2046, -1.0830,  1.2696, -2.6837],
        [ 0.6073, -1.0465, -0.0241, -2.9717],
        [ 0.8512, -2.1390, -0.8447,  0.3008],
        [ 1.4724,  1.3436,  0.6588, -0.9477],
        [-0.6259, -2.3322, -1.8035,  0.6455],
        [ 1.9250, -0.5183, -2.2363, -2.3194],
        [-2.7673, -1.3955,  0.5578,  0.2948],
        [ 3.3938,  4.7820, -1.2393, -3.9471],
        [-1.7383,  0.4038, -1.0636, -1.8314],
        [-0.6834,  0.9411,  0.5437,  1.0864],
        [ 1.1179, -0.2282, -3.0630, -2.0595],
        [ 0.7233, -0.4759, -6.0233, -0.3801],
        [ 2.9984,  6.0643, -1.0749, -0.7759],
        [-0.8975, -2.3489, -0.4282, -0.5859]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([-1.4632, -1.8053,  0.4400,  1.0018], device='cuda:0') tensor([-1.8661, -2.5890, -0.2317,  0.6869], device='cuda:0') tensor([ 3.9684,  1.7896,  0.2086, -1.6312], device='cuda:0') tensor([ 0.6190, -2.3189, -1.4806,  2.0850], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 0.5083,  4.0871,  1.3916, -1.9167],
        [ 0.7697,  1.3886,  1.1108, -0.5226],
        [-0.8004,  2.2839,  2.6954,  0.1026],
        [-0.0257,  2.0461, -0.9431, -2.0633],
        [ 2.7928,  0.3862, -0.4783, -1.6167],
        [-0.4497,  4.2833,  1.3478, -2.6852],
        [ 0.6240,  0.3917,  1.0691,  0.1095],
        [-0.2142,  2.1953, -1.5554, -2.1673],
        [ 1.0879, -0.8914, -0.6956, -1.2369],
        [ 1.2149,  2.7887, -0.7795, -2.3919],
        [ 0.5667,  3.1247,  2.3387, -0.9113],
        [ 0.7177,  2.0994, -0.3700, -2.2856],
        [-0.3813, -0.0075,  3.1673, -1.7671],
        [ 1.3038,  2.2163,  0.2873, -2.0341],
        [ 2.3815,  5.4243,  3.6817, -0.0595],
        [ 0.2475, -0.0857,  2.0863, -2.6015],
        [-1.4301,  0.2989,  0.7322, -0.3319],
        [ 2.2843,  3.8120,  1.1440, -1.3395],
        [ 0.2065,  0.9302,  1.0161, -2.1218],
        [ 1.6967,  0.3947, -2.6467, -1.4467]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 0.5083,  4.0871,  1.3916, -1.9167], device='cuda:0') tensor([ 1.8251,  4.8920,  4.9127, -0.8886], device='cuda:0') tensor([-1.9595,  1.4033,  7.2433,  2.3942], device='cuda:0') tensor([-0.9462, -0.0386,  1.0572,  2.3780], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[-0.3648,  0.1045, -0.1409,  0.0761],
        [ 1.3133,  3.9631,  1.5185, -3.6723],
        [ 2.3174,  1.9948, -1.4053, -3.8172],
        [ 2.7120,  2.0185,  0.5918, -2.0505],
        [ 0.0946,  2.1136,  0.4814, -2.1389],
        [ 3.3826,  2.5311,  2.1517, -2.0882],
        [ 1.4782,  0.2002,  1.4988, -2.0964],
        [ 1.2245, -1.6964,  0.2513, -2.7237],
        [-0.3438,  0.8031,  1.8882, -1.8465],
        [ 2.0773,  2.6985, -0.1659, -3.5616],
        [ 1.3636,  0.7015,  1.0735, -2.2356],
        [ 0.3322, -3.0839, -0.1224, -1.3328],
        [-0.2400, -0.3418,  0.1667, -0.2667],
        [-0.7692, -0.2555, -0.9457, -1.1052],
        [ 1.0281,  0.8678,  1.0123,  0.0246],
        [-1.2622,  3.7419,  0.2631, -1.4117],
        [ 1.8632,  1.5738, -2.7195, -2.2533],
        [ 1.1179,  1.8561, -0.7353, -1.4087],
        [ 1.1000,  1.8755, -0.3889, -2.4347],
        [ 1.0714,  1.8154, -0.4401,  0.5812]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([-0.3648,  0.1045, -0.1409,  0.0761], device='cuda:0') tensor([ 1.1044,  0.4129,  3.0943, -2.1566], device='cuda:0') tensor([-1.8125, -0.4065,  4.6296,  1.9911], device='cuda:0') tensor([-1.9785, -0.1412,  0.2323,  2.0057], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 2.1983,  1.4142, -1.5338, -3.2384],
        [ 0.2182, -0.8652,  1.7503, -1.7632],
        [ 0.8562,  0.9156,  0.1703, -1.9987],
        [ 1.0958,  0.1019,  0.8285, -1.8135],
        [ 3.5649,  1.3926, -0.3979, -2.7823],
        [ 1.1350, -0.8944, -1.9451, -2.5819],
        [ 0.6420, -2.0094, -0.4692, -3.3538],
        [ 2.0834,  1.6688, -0.2838, -2.7689],
        [ 2.4426,  1.6656, -0.0912, -1.2637],
        [ 2.4306, -0.4121, -0.9282, -2.7258],
        [ 4.1556,  0.3010,  0.1805, -2.8657],
        [-0.5348,  1.0376,  0.5776, -1.0369],
        [-0.9053, -0.8355, -1.3275, -1.8328],
        [ 1.8695, -2.0067,  1.8108, -0.3727],
        [ 0.5164,  1.7255, -1.2841, -1.6767],
        [-0.6283, -0.5183,  1.2417, -1.9449],
        [ 3.2620,  0.6848,  1.0360,  0.3221],
        [ 1.1016,  3.5225, -1.0610,  0.1804],
        [ 1.5095, -1.3039, -3.0344, -1.4754],
        [ 2.1828,  0.3713, -0.2761, -2.3161]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 2.1983,  1.4142, -1.5338, -3.2384], device='cuda:0') tensor([ 1.0048, -0.5473,  0.0905, -0.6490], device='cuda:0') tensor([ 0.8836, -0.6748,  3.5479, -2.1042], device='cuda:0') tensor([-1.3623,  1.2032,  0.9238, -1.2101], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 1.2971,  1.6832,  0.3096, -1.7858],
        [-0.7473, -0.7673,  0.7512, -2.8789],
        [ 1.6013, -4.2794, -1.2757, -0.2613],
        [ 0.3342, -0.1766,  1.0672, -0.0557],
        [ 0.1356, -2.1354,  0.6022,  0.2981],
        [-1.2011, -1.8232, -1.4879,  1.0980],
        [ 1.3615,  0.8903, -1.5174, -1.7379],
        [ 1.6232, -0.0925, -0.0408, -1.3096],
        [-1.9224,  1.0595, -0.0310, -0.4938],
        [ 2.2363,  2.8307, -1.7806, -3.0072],
        [-1.8095,  0.3823, -0.2961,  0.5435],
        [ 1.0194, -0.6094,  1.8536, -2.3697],
        [-0.3942,  1.5244, -1.5509, -1.1365],
        [ 0.4206, -1.1788, -0.9942, -1.6595],
        [ 1.0573, -0.1845,  0.3462, -3.2192],
        [ 2.7393,  2.8302,  0.3992, -1.6067],
        [-0.3192,  2.3662, -2.1727, -0.8751],
        [-0.0804,  1.4052, -0.2825, -3.9059],
        [-0.3335, -1.6582, -0.1499, -0.2213],
        [-0.7410, -1.6409,  0.0968,  1.4028]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 1.2971,  1.6832,  0.3096, -1.7858], device='cuda:0') tensor([ 1.1599, -0.2795,  2.1623, -1.6511], device='cuda:0') tensor([-0.9093,  0.3357,  2.3169, -1.8451], device='cuda:0') tensor([-1.5248, -0.2206,  0.0926,  1.1445], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 0.4766,  1.2424,  0.0599, -0.7688],
        [ 2.9123,  1.0481,  1.1037, -0.4407],
        [ 0.0529, -1.3655,  0.2043, -0.0552],
        [ 1.4718, -2.1347, -2.1356, -0.8599],
        [ 2.6537, -0.6460, -2.5517, -0.7344],
        [ 1.1511, -1.6258, -0.1955, -1.1051],
        [ 2.4319,  2.1201, -1.3501, -1.6117],
        [ 1.9907,  1.7038,  1.0758, -0.8692],
        [ 1.7680, -1.0000, -0.4974, -0.2961],
        [-0.6239, -1.5447, -2.3657, -2.1677],
        [ 0.9030,  0.5984, -1.5240,  0.1362],
        [ 1.0396,  2.1569,  1.1051, -1.5466],
        [ 0.5519,  3.6593,  1.1335, -0.9692],
        [ 2.3104,  2.3854,  0.2181, -2.0578],
        [-0.0443, -1.3485, -2.1140,  0.9595],
        [-0.7575, -1.1166, -0.8721,  0.2757],
        [-0.0827,  0.3042, -1.8572,  0.1960],
        [ 2.1976, -1.2688,  2.7798, -0.9663],
        [ 2.2182,  1.9324, -1.9843, -1.0896],
        [ 0.8304, -2.5535, -0.4790, -1.1019]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 0.4766,  1.2424,  0.0599, -0.7688], device='cuda:0') tensor([ 2.6329,  1.0586, -0.0864, -0.0605], device='cuda:0') tensor([ 0.7097,  0.1833, -0.1121,  1.4313], device='cuda:0') tensor([-1.4841, -2.1305, -0.7206,  3.3204], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 1.6621,  0.8611,  0.2118, -2.1186],
        [ 0.6881,  0.8112,  2.1524, -1.9559],
        [ 0.0287,  2.3897,  1.9524, -0.9189],
        [-1.0975, -1.1686, -1.5079, -1.0570],
        [ 0.1170,  0.1658, -0.9245, -1.2446],
        [ 2.0885,  0.2770,  0.4665, -0.4862],
        [ 1.7890,  2.0412, -1.2126, -0.6418],
        [-0.9372, -1.1253, -2.2798,  1.0066],
        [-0.0237, -1.2964, -1.1790, -0.3442],
        [ 1.8323,  2.2487,  0.9702, -1.1936],
        [-1.1150,  1.0297, -0.3087, -0.5953],
        [ 2.1847,  0.1156,  0.5392, -0.3531],
        [-1.3993,  0.9535,  0.4142, -1.4579],
        [ 1.1377,  0.2022,  1.8278, -0.3406],
        [ 0.8115,  0.0134, -1.0285, -0.0771],
        [ 0.4711,  1.5403, -0.7747,  0.1469],
        [ 1.3973,  3.3004, -1.4557, -0.7649],
        [ 1.3510, -2.9349, -1.2249, -0.9352],
        [ 1.3811,  1.6216,  1.8139, -0.4037],
        [-0.0758,  1.2764,  0.7711, -0.2931]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 1.6621,  0.8611,  0.2118, -2.1186], device='cuda:0') tensor([ 0.0879,  0.8900,  2.6755, -0.8980], device='cuda:0') tensor([-1.9496, -1.5498,  1.9564,  0.3143], device='cuda:0') tensor([ 0.0132, -3.1565, -3.0901,  1.8342], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 2.4519,  2.3245,  0.1224, -2.5308],
        [ 2.4846,  2.3769, -3.2423, -2.6649],
        [ 1.5756,  3.1943, -0.0637,  0.5272],
        [-0.1345,  1.1996,  0.7983,  1.1568],
        [ 2.4585,  2.3340,  0.6273, -0.5262],
        [-1.6222,  0.0458, -0.7974,  0.2980],
        [ 1.5208,  1.5441,  2.5398,  0.1066],
        [ 1.5626,  0.4957, -0.9731, -1.3032],
        [ 0.0862,  0.2597, -2.0879, -2.1778],
        [-0.1759,  1.6121, -0.9817, -0.8423],
        [ 0.4054, -1.1040, -2.1814, -0.6480],
        [ 2.3022,  1.1909,  1.5629, -2.1362],
        [ 1.5574,  5.3917,  3.2755, -2.3438],
        [ 1.0780, -0.3371,  0.1024, -1.0542],
        [ 1.8068, -1.2917, -2.3264, -0.6000],
        [ 1.1384,  1.2425, -1.2548, -2.9805],
        [ 0.9092, -0.6538, -0.6094, -0.2245],
        [ 2.3179,  2.2955,  0.0805, -0.5460],
        [-1.3777,  2.6559,  2.5148,  1.2581],
        [ 1.2125, -0.4343,  0.3188, -0.6316]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 2.4519,  2.3245,  0.1224, -2.5308], device='cuda:0') tensor([ 0.9108,  4.0890,  1.0391, -1.5858], device='cuda:0') tensor([-0.0265,  1.4597,  2.8522, -2.1383], device='cuda:0') tensor([-1.1062, -0.2385, -1.4707,  0.6476], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 5.1255,  2.7269, -1.9595, -1.8129],
        [ 1.7892,  0.8074,  0.9293, -2.6912],
        [ 0.2539,  1.4693, -0.7573, -1.0788],
        [-0.5171,  0.4424, -0.1107, -2.6678],
        [ 1.6827,  2.9266, -1.1417, -1.3281],
        [ 1.4589, -0.2251, -2.7776, -0.8169],
        [ 0.6933,  0.5983,  1.3717,  0.6131],
        [ 2.1253, -0.2252, -0.3376, -0.1422],
        [ 0.8925,  1.7507,  1.4573, -1.9649],
        [ 0.9216,  1.7094,  4.0402, -1.1762],
        [ 1.9156, -0.9806,  0.3457, -1.2640],
        [ 0.8612,  2.6648,  0.2435, -0.2362],
        [ 1.1462,  2.3884,  1.2531, -1.1988],
        [ 2.0222, -0.4213,  0.1494, -0.0104],
        [ 2.7586,  1.6690,  0.0429, -1.6757],
        [ 1.2443,  1.4805,  1.5546, -1.1597],
        [ 1.6602,  3.6410,  3.2524, -1.1233],
        [ 2.2060,  3.1547,  2.1497, -1.0203],
        [ 0.0179,  0.3438,  0.5118, -0.6779],
        [-0.2384,  1.1023,  3.3079, -0.6343]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 5.1255,  2.7269, -1.9595, -1.8129], device='cuda:0') tensor([ 3.9504,  2.5949, -1.3950, -1.3189], device='cuda:0') tensor([ 0.0941, -0.4443,  2.6318,  0.7804], device='cuda:0') tensor([ 0.1074, -1.8861, -0.6127,  2.4887], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 5.3140,  2.3952,  0.0488, -2.2559],
        [ 2.2348,  3.1456,  1.9684, -2.1244],
        [ 0.5095, -0.1385,  2.6858, -2.1655],
        [ 2.5792,  0.5083,  1.4916, -1.8629],
        [-0.0535,  0.2702,  1.1564, -0.4204],
        [ 2.0691,  0.2975,  1.2805,  1.1293],
        [ 4.6063,  0.5280,  0.7643, -1.2247],
        [ 3.1663,  1.2530,  3.0797, -0.7407],
        [ 1.1280,  2.2640, -1.4833, -1.6007],
        [ 1.1441,  0.8181,  0.0309, -0.4034],
        [ 0.8900, -0.5894, -0.2313, -2.1543],
        [ 1.2218,  1.4012,  0.5530, -2.4064],
        [ 0.5964,  0.1616, -2.5420, -1.2858],
        [ 2.3653,  2.4132, -0.6266, -2.6805],
        [ 3.3320,  3.6471, -0.8689, -2.0137],
        [ 1.1653,  0.5441, -3.0314, -0.1469],
        [ 3.1017,  2.9115, -0.4061, -2.1673],
        [ 3.0815, -0.4003, -0.2218, -1.4341],
        [ 1.6870,  1.0397, -1.9374, -1.2807],
        [ 4.1665,  2.1438, -1.1284, -2.2692]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 5.3140,  2.3952,  0.0488, -2.2559], device='cuda:0') tensor([ 1.5078,  3.5134,  0.7262, -2.6724], device='cuda:0') tensor([ 1.0381,  1.2095,  1.6514, -0.1492], device='cuda:0') tensor([ 0.5385, -0.9502, -1.3922, -0.2168], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 1.9112,  2.6407, -2.0729, -2.4094],
        [ 2.9473,  0.5794, -1.2567, -0.4224],
        [-1.2649, -1.8924,  2.8498, -0.7883],
        [-0.2733, -0.2851,  1.1384,  0.7101],
        [ 1.3775,  0.0724,  0.7137, -0.9761],
        [ 2.2633,  2.2270,  0.6786, -2.3360],
        [ 1.4308,  1.8524, -2.2482, -0.2053],
        [ 0.9817,  2.0981,  1.1379, -0.5531],
        [ 3.3032,  1.3132,  0.3858,  1.9692],
        [-2.0736, -4.1719,  0.5391, -0.6750],
        [ 4.1452,  1.2183, -1.3755, -2.1605],
        [ 3.5797,  3.4217, -0.0379, -0.7040],
        [-1.4906,  0.5147,  0.8061, -0.0515],
        [-1.4596,  1.7971,  0.7094, -1.7222],
        [ 1.7996,  1.7499,  0.9439, -1.1653],
        [ 0.5667, -1.2602, -0.3254,  0.2218],
        [ 0.2487, -4.2661,  1.2614,  1.7463],
        [ 3.5084,  1.5589,  0.2707, -2.3893],
        [ 3.6764,  2.6108,  3.5910, -1.4573],
        [ 3.0467,  2.8903, -0.3481,  0.2553]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 1.9112,  2.6407, -2.0729, -2.4094], device='cuda:0') tensor([ 0.5099,  0.8087, -3.1365, -1.9610], device='cuda:0') tensor([-0.3167,  0.0250,  1.3859, -0.3879], device='cuda:0') tensor([-1.6587, -2.2520, -0.3534,  1.4016], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 1.2313,  2.3291,  0.1371, -0.9404],
        [-0.2420,  2.0382, -0.1452, -1.1340],
        [ 2.1283,  2.2997,  0.4540,  0.7636],
        [ 0.7887,  1.1653,  0.4192,  0.1211],
        [-0.0114, -0.0975,  1.7083, -0.3235],
        [ 1.8305, -0.1915, -1.0880,  1.3188],
        [ 0.3412,  0.4302, -1.1213,  1.5284],
        [-0.0456,  2.2617, -0.9145,  0.6193],
        [ 0.5973, -1.0460,  0.4090, -0.2542],
        [ 1.0276,  2.9666, -1.3021,  0.2549],
        [ 1.3620,  0.2008, -0.3660, -2.5308],
        [-0.6741, -2.9793, -2.1301,  0.3905],
        [ 2.1079,  0.0710, -1.9556, -1.0567],
        [ 0.7263,  1.2966, -1.7344, -0.9891],
        [ 1.9214,  0.2180, -0.5553, -1.7208],
        [ 0.4357, -0.5067, -1.0733, -0.0737],
        [-1.4970,  0.8530, -0.4126, -0.1280],
        [ 2.0825,  1.0505,  1.7850,  1.1418],
        [ 1.1211,  2.1406, -1.0617,  0.0037],
        [ 0.9909, -0.9549,  1.1981, -0.9084]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 1.2313,  2.3291,  0.1371, -0.9404], device='cuda:0') tensor([ 1.7671,  3.9762,  3.4307, -0.0526], device='cuda:0') tensor([-3.4574,  0.2349,  2.3215, -0.1866], device='cuda:0') tensor([-2.2778, -1.8064, -1.1735,  2.1078], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 0.5869, -2.2417, -2.4722, -0.2716],
        [ 2.5397,  1.9179, -1.5612, -1.0456],
        [ 4.1651,  0.6070,  1.0378,  0.0658],
        [ 1.8126,  0.3703, -2.4917, -4.3904],
        [-1.0031,  0.6220,  1.5025,  0.6309],
        [ 2.1925,  0.1515,  0.3730, -1.8190],
        [-0.2251, -0.6533,  0.9828,  0.7312],
        [ 3.1854,  3.3989,  1.4850, -0.6312],
        [ 1.7163,  2.6907,  1.2428, -1.7076],
        [ 3.1386, -0.2562,  1.9445, -2.4551],
        [ 1.8065, -0.0667, -0.6605,  3.1457],
        [-0.6546,  0.0966,  0.1338, -0.1318],
        [ 0.6671,  2.2062,  0.8753, -1.3397],
        [ 3.4574,  2.3508, -0.1640, -1.5738],
        [ 1.1099, -1.0751,  1.0049, -2.0582],
        [ 1.2311,  0.9799, -0.1566, -1.6542],
        [ 2.7276,  3.1281,  1.7019,  0.0533],
        [ 3.6408,  2.8941, -0.7235, -1.0236],
        [-0.7971,  1.4630,  0.5615, -2.0404],
        [ 0.3861,  1.3300,  2.3783,  1.1161]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 0.5869, -2.2417, -2.4722, -0.2716], device='cuda:0') tensor([ 0.8678, -0.6185, -0.1910, -2.1085], device='cuda:0') tensor([ 2.2094,  1.6518,  1.2597, -1.9048], device='cuda:0') tensor([-1.2176, -2.2890, -1.7202,  2.9437], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 0.7941,  2.5115, -0.6270, -0.5124],
        [ 4.2111,  3.9441,  0.4913, -2.7022],
        [ 1.8633,  1.9149, -2.3341, -2.2848],
        [ 4.5563, -0.0208,  1.1363, -1.8311],
        [ 0.7957,  2.3211,  2.7581, -1.9815],
        [ 1.2109,  5.6359,  4.1747, -1.4595],
        [ 0.7181,  1.9058,  0.8408, -2.0207],
        [ 2.1877,  3.3057,  0.0828, -1.0192],
        [ 0.7259,  0.7862,  5.0209, -1.7602],
        [ 2.4548,  3.0303,  1.5801, -1.3810],
        [ 1.5355,  2.1948,  1.7993, -0.9883],
        [ 4.0057,  2.0040, -0.3257, -3.3878],
        [ 0.2765,  1.9987,  2.0082,  1.3327],
        [ 3.1952,  1.3995, -2.2758, -2.1606],
        [ 2.9732,  2.1392, -0.3823, -0.5700],
        [-1.1999, -1.8352,  3.3918,  2.9503],
        [ 3.1325,  1.5358, -1.3800, -3.7962],
        [ 0.1257,  2.0768, -0.6191, -2.3351],
        [ 4.2105,  1.2667, -1.1310, -1.8259],
        [ 1.9008, -0.3566,  0.8341,  1.1912]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 0.7941,  2.5115, -0.6270, -0.5124], device='cuda:0') tensor([ 1.3030,  2.8257, -1.4723, -2.3755], device='cuda:0') tensor([-0.9860, -2.5410,  2.1156, -0.0207], device='cuda:0') tensor([-1.0801, -2.6737, -2.0649,  3.3277], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 0.7938,  0.2541,  2.9022, -1.2461],
        [ 3.0584, -0.7134, -1.4218, -1.2418],
        [ 1.1439,  2.8916, -1.0125, -1.6983],
        [ 5.2513,  0.8708, -0.4505, -2.0729],
        [-0.8284,  1.6925,  4.1479,  0.1178],
        [ 0.7821,  2.3721,  1.2162, -1.1181],
        [ 0.1269,  1.5316,  0.5171, -1.1480],
        [ 5.2213,  2.5209, -0.9939, -1.5706],
        [ 3.4756,  1.0264,  3.8854, -1.3922],
        [ 1.7103,  1.8216, -1.9248, -1.5788],
        [ 0.9751,  1.0122,  1.6723, -0.4801],
        [ 1.0820,  0.9524, -0.8650, -2.3523],
        [ 1.3081, -1.3661, -1.4345, -2.4510],
        [ 2.5230,  5.1638, -2.0165, -1.2413],
        [ 2.6589,  0.8140, -0.3248, -2.4245],
        [-0.2041, -1.0961, -0.8947, -1.2912],
        [ 0.6462, -1.1796,  2.4035, -1.3058],
        [ 4.1467,  3.9563,  0.0548, -2.1903],
        [ 1.1547, -0.4347, -1.6783, -1.6861],
        [ 0.8261,  0.6564,  2.0373,  1.4771]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 0.7938,  0.2541,  2.9022, -1.2461], device='cuda:0') tensor([ 1.7290,  2.1499, -0.7529,  0.2241], device='cuda:0') tensor([ 0.8727,  0.4477,  3.6465,  0.8557], device='cuda:0') tensor([-0.3851, -3.3767, -2.1596,  2.9946], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 4.0429,  2.4350,  0.8004, -1.8300],
        [ 2.1178, -0.4286, -2.8940, -0.2557],
        [ 0.9473,  1.6300, -0.5701, -0.0086],
        [ 2.0983,  2.1457,  0.0260, -1.8464],
        [ 3.5387,  2.1244,  0.6162, -2.4647],
        [-1.0643, -0.6075,  1.3967, -0.8060],
        [ 1.1944,  1.4091, -0.6219, -1.2128],
        [ 4.3175,  1.6743,  1.5561, -0.9530],
        [ 3.9979,  1.1846,  1.7389, -0.3247],
        [ 1.8806, -0.2656,  0.2688, -2.4826],
        [ 1.8027, -0.2506,  1.1152, -1.3494],
        [ 0.4278, -2.9144, -0.3715,  2.0203],
        [ 3.0737,  4.0484, -1.0493, -1.2905],
        [ 2.1163,  2.8095,  0.2483, -0.9004],
        [ 2.7174,  1.3122,  0.0702, -3.2608],
        [ 3.4645,  2.9984,  1.1450,  1.3176],
        [ 0.4012, -1.1680,  0.4816, -0.5253],
        [ 2.6983,  4.2256,  1.7687, -0.6669],
        [ 3.8574,  4.4803, -0.9723, -2.3020],
        [ 3.7184, -1.1184, -2.4963, -2.1224]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 4.0429,  2.4350,  0.8004, -1.8300], device='cuda:0') tensor([ 3.5713,  3.7057,  1.9849, -1.3028], device='cuda:0') tensor([ 0.0715, -2.6199,  0.1477, -1.7143], device='cuda:0') tensor([-3.6817, -2.6067,  0.9043,  1.5992], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 2.2368,  0.6910, -1.1988,  0.2538],
        [ 2.4473,  2.9982, -0.2682, -0.4900],
        [ 2.4167,  1.2806,  0.8508, -1.1366],
        [-2.0189, -0.6592,  0.5783,  1.9836],
        [ 0.6307,  0.0709, -1.0707, -0.3722],
        [ 0.3841, -1.4450,  1.3456, -0.4754],
        [ 3.9288,  0.7244,  0.8323, -1.4382],
        [ 2.2697,  1.4577, -0.8540, -0.6807],
        [ 0.1999,  0.0131,  0.8601,  0.5490],
        [ 3.7737,  1.8778, -2.3642, -1.1123],
        [-0.2706,  0.1367,  0.3854,  0.7617],
        [ 1.4491, -0.6104,  2.4102,  0.6274],
        [ 0.7332, -3.6487,  0.9541,  1.3543],
        [ 2.8029, -1.9759, -1.5122, -1.3485],
        [ 0.0505,  1.4589, -2.0054, -0.6018],
        [ 1.0162,  2.0987,  0.2832, -0.5489],
        [ 3.1260,  0.0408,  0.0645, -1.7393],
        [ 3.0294,  1.5725,  1.3400, -1.1698],
        [ 2.2462,  3.0353,  1.0825, -1.3889],
        [ 2.9260,  2.0986, -1.9573,  0.7127]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 2.2368,  0.6910, -1.1988,  0.2538], device='cuda:0') tensor([ 2.0308,  2.3803,  0.5612, -0.0991], device='cuda:0') tensor([-0.9250, -1.0354,  1.9139,  1.7828], device='cuda:0') tensor([-3.8776, -2.6772,  0.4357,  2.8499], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[-0.5999,  0.0593,  1.3881,  0.6893],
        [ 3.0096,  2.4219,  0.3419, -3.3534],
        [ 1.0342,  0.0006,  2.8977, -0.9383],
        [-1.2847, -1.5524, -0.6628, -1.9679],
        [ 0.4163, -0.4877,  1.1004, -0.5064],
        [ 0.9780,  0.9882, -0.5622,  0.4332],
        [ 2.9302,  1.3553, -0.6787, -1.0141],
        [ 1.6817,  2.2043, -0.4778, -1.6392],
        [ 2.0444,  0.5131,  1.0711, -0.2870],
        [ 1.0194,  1.7310,  0.6916,  0.8142],
        [-0.7167, -0.6558,  1.2071,  1.3218],
        [ 0.4729, -0.3396,  0.6769,  0.6104],
        [-0.0788,  1.7070, -1.1466, -1.0393],
        [ 1.6382,  3.2588, -2.2641, -0.6092],
        [-0.9003, -2.0139,  1.3785,  0.2486],
        [ 0.9058,  0.4594,  2.3453, -1.1580],
        [ 3.0086,  2.3911,  1.1213,  0.5688],
        [ 0.1248, -2.3161,  1.0411, -0.9597],
        [-2.1212, -1.0561,  1.4927,  0.2495],
        [ 1.1944,  2.9273,  1.3210, -0.1343]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([-0.5999,  0.0593,  1.3881,  0.6893], device='cuda:0') tensor([ 2.9898,  1.0771,  1.2592, -1.0964], device='cuda:0') tensor([-0.8595,  0.1902,  3.2382,  0.0221], device='cuda:0') tensor([-4.9327, -3.1713,  0.2342,  4.6798], device='cuda:0')
Discriminator aux label size HERE torch.Size([20, 4])
tensor([[ 2.1357,  4.6473,  3.3684, -1.2884],
        [ 1.4630,  2.6048, -0.7549, -0.9918],
        [ 1.8031,  3.1100, -0.7273, -0.7305],
        [ 0.2794,  0.5885,  1.5517, -1.9821],
        [ 3.0670,  2.6082,  3.4523, -0.9667],
        [ 0.5761,  1.4538,  2.7735, -2.4770],
        [ 3.9975,  1.6939,  1.0688,  0.3215],
        [-0.2041,  1.0860,  1.6577,  0.6065],
        [ 0.9400,  0.3759,  1.9799,  0.0732],
        [ 0.9346,  1.9879,  2.5937, -1.3442],
        [ 0.3175, -1.1201, -1.6010, -1.6633],
        [-1.1261, -3.0285, -0.2805, -0.7670],
        [ 1.0669,  0.0422,  1.3114,  2.5341],
        [ 2.2560,  1.3368,  1.3001,  1.4741],
        [ 2.7632,  3.0373,  1.4107, -1.5770],
        [ 0.2448,  4.3003,  3.0626, -1.7602],
        [ 1.6790, -0.2225, -3.1620, -0.3631],
        [-0.1733, -0.1969,  0.6703,  0.7427],
        [ 0.1757, -1.4329, -0.1794,  0.0859],
        [ 1.3896, -0.3983,  0.5985, -0.8734]], device='cuda:0') tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0], device='cuda:0')
Some discriminator outputs::  tensor([ 2.1357,  4.6473,  3.3684, -1.2884], device='cuda:0') tensor([ 0.2859,  0.1303,  0.7282, -0.2750], device='cuda:0') tensor([ 3.4915,  3.9979,  2.4065, -2.6708], device='cuda:0') tensor([-4.0085, -3.0184, -0.0737,  3.5956], device='cuda:0')
